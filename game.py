import json
import random
import argparse
import os

BOARD_FILE = "board.json"
README_FILE = "README.md"
PLAYER_SYMBOL = "X"
AI_SYMBOL = "O"

def load_board():
    if os.path.exists(BOARD_FILE):
        with open(BOARD_FILE, 'r') as f:
            return json.load(f)
    return None

def save_board(state):
    with open(BOARD_FILE, 'w') as f:
        json.dump(state, f, indent=2)

def reset_game_state():
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    current_state = load_board()
    player_wins = current_state.get("player_wins", 0) if current_state else 0
    ai_wins = current_state.get("ai_wins", 0) if current_state else 0
    draws = current_state.get("draws", 0) if current_state else 0
    
    return {
        "board": [["", "", ""], ["", "", ""], ["", "", ""]],
        "status": "–í –∏–≥—Ä–µ",
        "message": "–í–∞—à —Ö–æ–¥ (X). –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É.",
        "player_wins": player_wins,
        "ai_wins": ai_wins,
        "draws": draws
    }

def check_winner(board, player):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_draw(board):
    return all(cell for row in board for cell in row)

def player_move(state, row, col):
    if state["status"] != "–í –∏–≥—Ä–µ":
        state["message"] = f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ ({state['status']}). –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É."
        return state
    
    board = state["board"]
    if board[row][col] == "":
        board[row][col] = PLAYER_SYMBOL
        if check_winner(board, PLAYER_SYMBOL):
            state["status"] = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
            state["message"] = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É' –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏."
            state["player_wins"] = state.get("player_wins", 0) + 1
        elif is_draw(board):
            state["status"] = "–ù–∏—á—å—è"
            state["message"] = "–ù–∏—á—å—è! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É' –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏."
            state["draws"] = state.get("draws", 0) + 1
        else:
            state["message"] = "–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (O)..." # –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –ò–ò –Ω–µ —Å—Ö–æ–¥–∏–ª
            # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º —Ö–æ–¥ –ò–ò
            state = ai_move(state)
    else:
        state["message"] = "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é."
    return state

def ai_move(state):
    if state["status"] != "–í –∏–≥—Ä–µ": # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤—ã–∏–≥—Ä–∞–ª/–Ω–∏—á—å—è
        return state

    board = state["board"]
    empty_cells = []
    for r in range(3):
        for c in range(3):
            if board[r][c] == "":
                empty_cells.append((r, c))

    if not empty_cells: # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ is_draw –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ
        return state

    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ò–ò:
    # 1. –í—ã–∏–≥—Ä–∞—Ç—å, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    for r, c in empty_cells:
        board[r][c] = AI_SYMBOL
        if check_winner(board, AI_SYMBOL):
            state["status"] = "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª"
            state["message"] = "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É' –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏."
            state["ai_wins"] = state.get("ai_wins", 0) + 1
            return state
        board[r][c] = "" # –û—Ç–∫–∞—Ç–∏—Ç—å —Ö–æ–¥

    # 2. –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω –º–æ–∂–µ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–æ–º
    for r, c in empty_cells:
        board[r][c] = PLAYER_SYMBOL
        if check_winner(board, PLAYER_SYMBOL):
            board[r][c] = AI_SYMBOL # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ö–æ–¥
            if is_draw(board): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –ò–ò
                state["status"] = "–ù–∏—á—å—è"
                state["message"] = "–ù–∏—á—å—è! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É' –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏."
                state["draws"] = state.get("draws", 0) + 1
            else:
                 state["message"] = "–í–∞—à —Ö–æ–¥ (X). –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É."
            return state
        board[r][c] = "" # –û—Ç–∫–∞—Ç–∏—Ç—å —Ö–æ–¥

    # 3. –ó–∞–Ω—è—Ç—å —Ü–µ–Ω—Ç—Ä, –µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–µ–Ω
    if (1, 1) in empty_cells:
        r, c = 1, 1
    # 4. –ó–∞–Ω—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª, –µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–µ–Ω
    else:
        corners = [(0,0), (0,2), (2,0), (2,2)]
        available_corners = [cell for cell in corners if cell in empty_cells]
        if available_corners:
            r, c = random.choice(available_corners)
        # 5. –ó–∞–Ω—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –∫–ª–µ—Ç–∫—É
        else:
            r, c = random.choice(empty_cells)
    
    board[r][c] = AI_SYMBOL
    if check_winner(board, AI_SYMBOL): # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        state["status"] = "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª"
        state["message"] = "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É' –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏."
        state["ai_wins"] = state.get("ai_wins", 0) + 1
    elif is_draw(board):
        state["status"] = "–ù–∏—á—å—è"
        state["message"] = "–ù–∏—á—å—è! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É' –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏."
        state["draws"] = state.get("draws", 0) + 1
    else:
        state["message"] = "–í–∞—à —Ö–æ–¥ (X). –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É."
    return state

def generate_board_markdown(state):
    board = state["board"]
    status = state["status"]
    message = state["message"]
    
    # GitHub username and repo name (usually the same for profile READMEs)
    # –í–∞–∂–Ω–æ: –ó–∞–º–µ–Ω–∏—Ç–µ 'renothingg' –Ω–∞ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    # –î–ª—è –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö README —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    github_user_repo = "renothingg/renothingg" 
    workflow_file = "tictactoe_game.yml"

    md = "<div align='center'>\n"
    md += "<table>\n"
    for r in range(3):
        md += "  <tr>\n"
        for c in range(3):
            cell_content = board[r][c] if board[r][c] else "¬†¬†" # –ò—Å–ø–æ–ª—å–∑—É–µ–º ¬† –¥–ª—è –ø—É—Å—Ç—ã—Ö, —á—Ç–æ–±—ã —è—á–µ–π–∫–∏ –Ω–µ —Å—Ö–ª–æ–ø—ã–≤–∞–ª–∏—Å—å
            cell_display = cell_content
            if board[r][c] == "" and status == "–í –∏–≥—Ä–µ":
                link = f"https://github.com/{github_user_repo}/actions/workflows/{workflow_file}/dispatches?ref=main&inputs[action]=move&inputs[row]={r}&inputs[col]={c}"
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                cell_display = f'<a href="{link}" style="text-decoration:none; color:inherit;">üïπÔ∏è</a>'
            elif board[r][c] == PLAYER_SYMBOL:
                 cell_display = "‚ùå" # X
            elif board[r][c] == AI_SYMBOL:
                 cell_display = "‚≠ï" # O
            else: # –ï—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –Ω–µ –¥–µ–ª–∞–µ–º –∫–ª–µ—Ç–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏
                 cell_display = f"{cell_content}"


            md += f'    <td align="center" valign="middle" width="50" height="50" style="font-size:24px; border: 1px solid #555;">{cell_display}</td>\n'
        md += "  </tr>\n"
    md += "</table>\n"
    
    md += f"<p>{message}</p>\n"
    md += f"<p><b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> –ò–≥—Ä–æ–∫: {state.get('player_wins',0)} - –ò–ò: {state.get('ai_wins',0)} - –ù–∏—á—å–∏: {state.get('draws',0)}</p>\n"
    md += "</div>\n"
    return md

def update_readme(game_markdown):
    with open(README_FILE, 'r', encoding='utf-8') as f:
        readme_content = f.readlines()

    start_marker = "<!-- TICTACTOE_START -->\n"
    end_marker = "<!-- TICTACTOE_END -->\n"

    if start_marker not in readme_content or end_marker not in readme_content:
        print(f"–ú–∞—Ä–∫–µ—Ä—ã {start_marker.strip()} –∏/–∏–ª–∏ {end_marker.strip()} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {README_FILE}")
        # –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ—Ç, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω–µ—Ü –∏–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ—Ç, –º—ã –Ω–µ –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å README.
        # –í–∞–º –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–∞—Ä–∫–µ—Ä—ã –µ—Å—Ç—å –≤ –≤–∞—à–µ–º README.md.
        return False

    start_index = readme_content.index(start_marker)
    end_index = readme_content.index(end_marker)

    new_readme_content = readme_content[:start_index + 1]
    new_readme_content.append(game_markdown + "\n")
    new_readme_content.extend(readme_content[end_index:])

    with open(README_FILE, 'w', encoding='utf-8') as f:
        f.writelines(new_readme_content)
    return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--action", help="–î–µ–π—Å—Ç–≤–∏–µ: 'move' –∏–ª–∏ 'reset'", required=True)
    parser.add_argument("--row", type=int, help="–†—è–¥ –¥–ª—è —Ö–æ–¥–∞ (0-2)")
    parser.add_argument("--col", type=int, help="–ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ö–æ–¥–∞ (0-2)")
    args = parser.parse_args()

    current_state = load_board()
    if not current_state: # –ï—Å–ª–∏ —Ñ–∞–π–ª board.json –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç
        print("–§–∞–π–ª board.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
        current_state = reset_game_state()
        # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É, –¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ reset, –∞ move, —Ç–æ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–Ω–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
        # –õ—É—á—à–µ, –µ—Å–ª–∏ action reset –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º.

    if args.action == "reset":
        current_state = reset_game_state()
        print("–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")
    elif args.action == "move":
        if current_state["status"] != "–í –∏–≥—Ä–µ":
            current_state["message"] = f"–ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞ ({current_state['status']}). –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É'."
            print(f"–ü–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –æ–∫–æ–Ω—á–µ–Ω–Ω–æ–π –∏–≥—Ä–µ. –°—Ç–∞—Ç—É—Å: {current_state['status']}")
        elif args.row is not None and args.col is not None:
            print(f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞: —Å—Ç—Ä–æ–∫–∞ {args.row}, –∫–æ–ª–æ–Ω–∫–∞ {args.col}")
            current_state = player_move(current_state, args.row, args.col)
        else:
            current_state["message"] = "–û—à–∏–±–∫–∞: –¥–ª—è —Ö–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Å—Ç—Ä–æ–∫–∞ –∏/–∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∞."
            print("–û—à–∏–±–∫–∞: –¥–ª—è —Ö–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Å—Ç—Ä–æ–∫–∞ –∏/–∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∞.")
    
    save_board(current_state)
    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {current_state}")
    
    game_md = generate_board_markdown(current_state)
    if update_readme(game_md):
        print(f"{README_FILE} –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {README_FILE} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤.")