import json
import random
import argparse
import os

BOARD_FILE = "board.json"
README_FILE = "README.md" # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∏–º—è –≤–∞—à–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ README —Ñ–∞–π–ª–∞
PLAYER_SYMBOL = "X"
AI_SYMBOL = "O"

def load_board():
    if os.path.exists(BOARD_FILE):
        try:
            with open(BOARD_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ {BOARD_FILE}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return reset_game_state(load_stats=False) # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –±–∏—Ç—ã–π
    print(f"{BOARD_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
    return reset_game_state(load_stats=False) # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç

def save_board(state):
    with open(BOARD_FILE, 'w', encoding='utf-8') as f:
        json.dump(state, f, indent=2, ensure_ascii=False)

def reset_game_state(load_stats=True):
    player_wins = 0
    ai_wins = 0
    draws = 0

    if load_stats: # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–±—Ä–æ—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–∞
        current_state = None
        if os.path.exists(BOARD_FILE):
            try:
                with open(BOARD_FILE, 'r', encoding='utf-8') as f:
                    current_state = json.load(f)
            except json.JSONDecodeError:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ board.json")
        
        if current_state:
            player_wins = current_state.get("player_wins", 0)
            ai_wins = current_state.get("ai_wins", 0)
            draws = current_state.get("draws", 0)
    
    return {
        "board": [["", "", ""], ["", "", ""], ["", "", ""]],
        "status": "–í –∏–≥—Ä–µ",
        "message": "–í–∞—à —Ö–æ–¥ (X). –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É.",
        "player_wins": player_wins,
        "ai_wins": ai_wins,
        "draws": draws
    }

def check_winner(board, player):
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_draw(board):
    return all(cell for row in board for cell in row)

def player_move(state, row, col):
    if state["status"] != "–í –∏–≥—Ä–µ":
        state["message"] = f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ ({state['status']}). –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É."
        return state
    
    board = state["board"]
    if board[row][col] == "":
        board[row][col] = PLAYER_SYMBOL
        if check_winner(board, PLAYER_SYMBOL):
            state["status"] = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
            state["message"] = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É' –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏."
            state["player_wins"] = state.get("player_wins", 0) + 1
        elif is_draw(board):
            state["status"] = "–ù–∏—á—å—è"
            state["message"] = "–ù–∏—á—å—è! ü§ù –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É' –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏."
            state["draws"] = state.get("draws", 0) + 1
        else:
            state["message"] = "–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (O)..."
            state = ai_move(state) # –•–æ–¥ –ò–ò —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–≥—Ä–æ–∫–∞
    else:
        state["message"] = "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é."
    return state

def ai_move(state):
    if state["status"] != "–í –∏–≥—Ä–µ":
        return state

    board = state["board"]
    empty_cells = []
    for r_idx, row_val in enumerate(board):
        for c_idx, cell_val in enumerate(row_val):
            if cell_val == "":
                empty_cells.append((r_idx, c_idx))

    if not empty_cells: # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è is_draw –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–Ω—å—à–µ
        return state

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ò–ò:
    # 1. –í—ã–∏–≥—Ä–∞—Ç—å, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    for r, c in empty_cells:
        board[r][c] = AI_SYMBOL
        if check_winner(board, AI_SYMBOL):
            state["status"] = "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª"
            state["message"] = "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª. ü§ñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É'."
            state["ai_wins"] = state.get("ai_wins", 0) + 1
            return state
        board[r][c] = ""

    # 2. –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    for r, c in empty_cells:
        board[r][c] = PLAYER_SYMBOL
        if check_winner(board, PLAYER_SYMBOL):
            board[r][c] = AI_SYMBOL # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ö–æ–¥
            if is_draw(board):
                state["status"] = "–ù–∏—á—å—è"
                state["message"] = "–ù–∏—á—å—è! ü§ù –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É' –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏."
                state["draws"] = state.get("draws", 0) + 1
            else:
                 state["message"] = "–í–∞—à —Ö–æ–¥ (X). –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É."
            return state
        board[r][c] = ""

    # 3. –ó–∞–Ω—è—Ç—å —Ü–µ–Ω—Ç—Ä
    if (1, 1) in empty_cells:
        r_ai, c_ai = 1, 1
    # 4. –ó–∞–Ω—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª
    else:
        corners = [(0,0), (0,2), (2,0), (2,2)]
        random.shuffle(corners)
        available_corners = [cell for cell in corners if cell in empty_cells]
        if available_corners:
            r_ai, c_ai = available_corners[0]
        # 5. –ó–∞–Ω—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –∫–ª–µ—Ç–∫—É
        else:
            r_ai, c_ai = random.choice(empty_cells)
    
    board[r_ai][c_ai] = AI_SYMBOL
    if check_winner(board, AI_SYMBOL):
        state["status"] = "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª"
        state["message"] = "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª. ü§ñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É'."
        state["ai_wins"] = state.get("ai_wins", 0) + 1
    elif is_draw(board):
        state["status"] = "–ù–∏—á—å—è"
        state["message"] = "–ù–∏—á—å—è! ü§ù –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É' –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏."
        state["draws"] = state.get("draws", 0) + 1
    else:
        state["message"] = "–í–∞—à —Ö–æ–¥ (X). –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É."
    return state

def generate_board_markdown(state, github_user_repo, workflow_file):
    board = state["board"]
    status = state["status"]
    message = state["message"]
    
    md = "<div align='center'>\n"
    md += "<table>\n"
    for r in range(3):
        md += "  <tr>\n"
        for c in range(3):
            cell_content = board[r][c]
            cell_display = "¬†¬†" # –î–ª—è –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if cell_content == PLAYER_SYMBOL:
                 cell_display = "‚ùå"
            elif cell_content == AI_SYMBOL:
                 cell_display = "‚≠ï"
            elif status == "–í –∏–≥—Ä–µ": # –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ –∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç - –¥–µ–ª–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
                link = f"https://github.com/{github_user_repo}/actions/workflows/{workflow_file}/dispatches?ref=main&inputs[action]=move&inputs[row]={r}&inputs[col]={c}"
                cell_display = f'<a href="{link}" style="text-decoration:none; color:inherit;">üïπÔ∏è</a>'
            # –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è, –Ω–æ –∏–≥—Ä–∞ –Ω–µ –∏–¥–µ—Ç, –æ—Å—Ç–∞–µ—Ç—Å—è ¬†¬†

            md += f'    <td align="center" valign="middle" width="50" height="50" style="font-size:24px; border: 1px solid #555;">{cell_display}</td>\n'
        md += "  </tr>\n"
    md += "</table>\n"
    
    md += f"<p>{message}</p>\n"
    md += f"<p><b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> –ò–≥—Ä–æ–∫: {state.get('player_wins',0)} - –ò–ò: {state.get('ai_wins',0)} - –ù–∏—á—å–∏: {state.get('draws',0)}</p>\n"
    md += "</div>\n"
    return md

def update_readme(game_markdown):
    try:
        with open(README_FILE, 'r', encoding='utf-8') as f:
            readme_content = f.readlines()
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {README_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False

    start_marker = "<!-- TICTACTOE_START -->\n"
    end_marker = "<!-- TICTACTOE_END -->\n"

    try:
        start_index = readme_content.index(start_marker)
        end_index = readme_content.index(end_marker)
    except ValueError:
        print(f"–û—à–∏–±–∫–∞: –ú–∞—Ä–∫–µ—Ä—ã {start_marker.strip()} –∏/–∏–ª–∏ {end_marker.strip()} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {README_FILE}")
        return False

    new_readme_content = readme_content[:start_index + 1]
    new_readme_content.append(game_markdown + "\n") # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º Markdown –∏–≥—Ä—ã
    new_readme_content.extend(readme_content[end_index:])

    with open(README_FILE, 'w', encoding='utf-8') as f:
        f.writelines(new_readme_content)
    return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ò–≥—Ä–∞ –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏ –¥–ª—è GitHub README")
    parser.add_argument("--action", help="–î–µ–π—Å—Ç–≤–∏–µ: 'move' –∏–ª–∏ 'reset'", required=True, choices=['move', 'reset'])
    
    # –î–µ–ª–∞–µ–º row –∏ col –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    parser.add_argument("--row", help="–†—è–¥ –¥–ª—è —Ö–æ–¥–∞ (0-2)", default=None)
    parser.add_argument("--col", help="–ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ö–æ–¥–∞ (0-2)", default=None)
    
    args = parser.parse_args()

    current_state = load_board()
    # –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ workflow –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'renothingg/renothingg' –Ω–∞ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –¥—Ä—É–≥–æ–µ
    # –û–±—ã—á–Ω–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ README —ç—Ç–æ –≤–∞—à_–ª–æ–≥–∏–Ω/–≤–∞—à_–ª–æ–≥–∏–Ω
    GITHUB_USER_REPO = os.getenv('GITHUB_REPOSITORY', 'renothingg/renothingg') 
    WORKFLOW_FILE = "tictactoe_game.yml" # –ò–º—è –≤–∞—à–µ–≥–æ workflow —Ñ–∞–π–ª–∞

    parsed_row, parsed_col = None, None

    if args.action == "reset":
        print("–î–µ–π—Å—Ç–≤–∏–µ: –°–±—Ä–æ—Å –∏–≥—Ä—ã.")
        current_state = reset_game_state()
    elif args.action == "move":
        print(f"–î–µ–π—Å—Ç–≤–∏–µ: –•–æ–¥. –ü–æ–ª—É—á–µ–Ω–æ row='{args.row}', col='{args.col}'")
        if args.row is not None and args.col is not None:
            try:
                temp_row = int(args.row)
                temp_col = int(args.col)
                if 0 <= temp_row <= 2 and 0 <= temp_col <= 2:
                    parsed_row = temp_row
                    parsed_col = temp_col
                else:
                    current_state["message"] = "–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ö–æ–¥–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (0-2)."
                    print(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ö–æ–¥–∞: row={temp_row}, col={temp_col}")
            except ValueError:
                current_state["message"] = "–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ö–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏."
                print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å row ('{args.row}') –∏–ª–∏ col ('{args.col}') –≤ —á–∏—Å–ª–∞.")
        
        if parsed_row is not None and parsed_col is not None:
            if current_state["status"] == "–í –∏–≥—Ä–µ":
                print(f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞: —Å—Ç—Ä–æ–∫–∞ {parsed_row}, –∫–æ–ª–æ–Ω–∫–∞ {parsed_col}")
                current_state = player_move(current_state, parsed_row, parsed_col)
            else:
                current_state["message"] = f"–ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞ ({current_state['status']}). –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É'."
                print(f"–ü–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –æ–∫–æ–Ω—á–µ–Ω–Ω–æ–π –∏–≥—Ä–µ. –°—Ç–∞—Ç—É—Å: {current_state['status']}")
        else:
            if current_state["status"] == "–í –∏–≥—Ä–µ": # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ —Ö–æ–¥–∞
                 current_state["message"] = "–û—à–∏–±–∫–∞: –î–ª—è —Ö–æ–¥–∞ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã."
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ö–æ–¥–∞.")
            # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ —Ö–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    save_board(current_state)
    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: –°—Ç–∞—Ç—É—Å='{current_state['status']}', –°–æ–æ–±—â–µ–Ω–∏–µ='{current_state['message']}'")
    
    game_md = generate_board_markdown(current_state, GITHUB_USER_REPO, WORKFLOW_FILE)
    if update_readme(game_md):
        print(f"{README_FILE} –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {README_FILE}.")